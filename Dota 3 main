package com.mycompany.dota3;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Dota3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        howtoplay toplay = new howtoplay();

        boolean quit = false;

        while (!quit) {
            System.out.println("--------DOTA 3--------\n\n");
            System.out.println("1) Find Match(COMING SOON)");
            System.out.println("2) PLAY DOTA");
            System.out.println("3) How to Play");
            System.out.println("4) Quit Game");
            System.out.print("Here: ");
            
            try {
                int choice = sc.nextInt();

                switch (choice) {
                    case 1:
                        // Find Match logic
                        System.out.println("COMING SOON");
                        break;
                    case 2:
                        playGame(sc);
                        break;
                    case 3:
                        toplay.display();
                        goBackToMainMenu(sc);
                        break;
                    case 4:
                        quit = true;
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                        break;
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                sc.nextLine(); // clear the invalid input from the scanner
            }
        }
    }

    // ... (other methods remain the same)

    private static void playGame(Scanner sc) {
        List<Game> heroes = new ArrayList<>();
        heroes.add(new Warrior("Io", 100));
        heroes.add(new Warrior("Marci", 100));
        heroes.add(new Warrior("Sven", 100));
        heroes.add(new Warrior("Tiny", 100));
        heroes.add(new Warrior("Zeus", 100));

        // Display the list of heroes for the user to pick
        System.out.println("Choose a hero by entering the hero's name:");
        for (Game hero : heroes) {
            System.out.println(hero.getName());
        }

        // Get the user's hero choice
        System.out.print("Enter here: ");
        sc.nextLine();
        String heroChoice = sc.nextLine();

        try {
            // Find the selected hero from the list
            Game selectedHero = findHero(heroes, heroChoice);

            // Choose difficulty level: "easy", "medium", or "hard"
            System.out.print("Choose difficulty[Easy, Medium, Hard]: ");
            String difficulty = sc.nextLine();

            TurnGame game = new TurnGame(selectedHero, difficulty);
            game.playGame();
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void goBackToMainMenu(Scanner sc) {
    System.out.print("Do you want to go back to the main menu? (yes/no): ");
    String answer = sc.next().toLowerCase();
    if (answer.equals("yes")) {
        clearScreen();
    } else if (answer.equals("no")) {
        System.out.println("Exiting the game. Thankyou! Goodbye!");
        System.exit(0); 
    } else {
        System.out.println("Invalid input. Exiting the game. Goodbye!");
        System.exit(0); 
    }
}

    private static void clearScreen() {
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                // For non-Windows systems, print empty lines to simulate clearing
                for (int i = 0; i < 50; ++i) System.out.println();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Game findHero(List<Game> heroes, String heroName) {
        for (Game hero : heroes) {
            if (hero.getName().equalsIgnoreCase(heroName)) {
                return hero;
            }
        }
        throw new IllegalArgumentException("Invalid hero choice");
    }
}
